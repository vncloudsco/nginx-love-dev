{
  "version": 3,
  "sources": ["cloudflare-client.ts"],
  "sourcesContent": ["/**\n * Cloudflare API Client\n * Wrapper for Cloudflare API interactions\n */\n\nimport axios, { AxiosInstance } from 'axios';\n\nexport interface CloudflareConfig {\n  apiToken: string;\n  accountId: string;\n  zoneId?: string;\n}\n\nexport interface DNSRecord {\n  id?: string;\n  type: 'A' | 'AAAA' | 'CNAME' | 'MX' | 'TXT' | 'NS' | 'SRV' | 'CAA';\n  name: string;\n  content: string;\n  ttl: number;\n  proxied: boolean;\n  priority?: number;\n  comment?: string;\n}\n\nexport interface FirewallRule {\n  id?: string;\n  mode: 'block' | 'challenge' | 'whitelist' | 'js_challenge';\n  configuration: {\n    target: 'ip' | 'ip_range' | 'country' | 'asn';\n    value: string;\n  };\n  notes?: string;\n  paused?: boolean;\n}\n\nexport interface CloudflareZone {\n  id: string;\n  name: string;\n  status: string;\n  paused: boolean;\n  type: string;\n  name_servers: string[];\n}\n\nexport class CloudflareClient {\n  private client: AxiosInstance;\n  private config: CloudflareConfig;\n\n  constructor(config: CloudflareConfig) {\n    this.config = config;\n    this.client = axios.create({\n      baseURL: 'https://api.cloudflare.com/client/v4',\n      headers: {\n        'Authorization': `Bearer ${config.apiToken}`,\n        'Content-Type': 'application/json',\n      },\n    });\n  }\n\n  /**\n   * Get all zones for the account\n   */\n  async getZones(): Promise<CloudflareZone[]> {\n    const response = await this.client.get('/zones', {\n      params: {\n        account: {\n          id: this.config.accountId,\n        },\n      },\n    });\n\n    if (!response.data.success) {\n      throw new Error(response.data.errors?.[0]?.message || 'Failed to fetch zones');\n    }\n\n    return response.data.result;\n  }\n\n  /**\n   * Get zone by ID\n   */\n  async getZone(zoneId: string): Promise<CloudflareZone> {\n    const response = await this.client.get(`/zones/${zoneId}`);\n\n    if (!response.data.success) {\n      throw new Error(response.data.errors?.[0]?.message || 'Failed to fetch zone');\n    }\n\n    return response.data.result;\n  }\n\n  // ==================== DNS Records ====================\n\n  /**\n   * List DNS records for a zone\n   */\n  async listDNSRecords(zoneId: string, params?: { type?: string; name?: string }): Promise<DNSRecord[]> {\n    const response = await this.client.get(`/zones/${zoneId}/dns_records`, { params });\n\n    if (!response.data.success) {\n      throw new Error(response.data.errors?.[0]?.message || 'Failed to fetch DNS records');\n    }\n\n    return response.data.result;\n  }\n\n  /**\n   * Get single DNS record\n   */\n  async getDNSRecord(zoneId: string, recordId: string): Promise<DNSRecord> {\n    const response = await this.client.get(`/zones/${zoneId}/dns_records/${recordId}`);\n\n    if (!response.data.success) {\n      throw new Error(response.data.errors?.[0]?.message || 'Failed to fetch DNS record');\n    }\n\n    return response.data.result;\n  }\n\n  /**\n   * Create DNS record\n   */\n  async createDNSRecord(zoneId: string, record: Omit<DNSRecord, 'id'>): Promise<DNSRecord> {\n    const response = await this.client.post(`/zones/${zoneId}/dns_records`, record);\n\n    if (!response.data.success) {\n      throw new Error(response.data.errors?.[0]?.message || 'Failed to create DNS record');\n    }\n\n    return response.data.result;\n  }\n\n  /**\n   * Update DNS record\n   */\n  async updateDNSRecord(zoneId: string, recordId: string, record: Partial<DNSRecord>): Promise<DNSRecord> {\n    const response = await this.client.patch(`/zones/${zoneId}/dns_records/${recordId}`, record);\n\n    if (!response.data.success) {\n      throw new Error(response.data.errors?.[0]?.message || 'Failed to update DNS record');\n    }\n\n    return response.data.result;\n  }\n\n  /**\n   * Delete DNS record\n   */\n  async deleteDNSRecord(zoneId: string, recordId: string): Promise<void> {\n    const response = await this.client.delete(`/zones/${zoneId}/dns_records/${recordId}`);\n\n    if (!response.data.success) {\n      throw new Error(response.data.errors?.[0]?.message || 'Failed to delete DNS record');\n    }\n  }\n\n  // ==================== Firewall Rules (IP Access Rules) ====================\n\n  /**\n   * List IP access rules\n   */\n  async listIPAccessRules(zoneId?: string): Promise<any[]> {\n    const endpoint = zoneId\n      ? `/zones/${zoneId}/firewall/access_rules/rules`\n      : `/accounts/${this.config.accountId}/firewall/access_rules/rules`;\n\n    const response = await this.client.get(endpoint);\n\n    if (!response.data.success) {\n      throw new Error(response.data.errors?.[0]?.message || 'Failed to fetch IP access rules');\n    }\n\n    return response.data.result;\n  }\n\n  /**\n   * Get single IP access rule\n   */\n  async getIPAccessRule(ruleId: string, zoneId?: string): Promise<any> {\n    const endpoint = zoneId\n      ? `/zones/${zoneId}/firewall/access_rules/rules/${ruleId}`\n      : `/accounts/${this.config.accountId}/firewall/access_rules/rules/${ruleId}`;\n\n    const response = await this.client.get(endpoint);\n\n    if (!response.data.success) {\n      throw new Error(response.data.errors?.[0]?.message || 'Failed to fetch IP access rule');\n    }\n\n    return response.data.result;\n  }\n\n  /**\n   * Create IP access rule (block/whitelist IP)\n   */\n  async createIPAccessRule(rule: FirewallRule, zoneId?: string): Promise<any> {\n    const endpoint = zoneId\n      ? `/zones/${zoneId}/firewall/access_rules/rules`\n      : `/accounts/${this.config.accountId}/firewall/access_rules/rules`;\n\n    const response = await this.client.post(endpoint, {\n      mode: rule.mode,\n      configuration: rule.configuration,\n      notes: rule.notes || '',\n    });\n\n    if (!response.data.success) {\n      throw new Error(response.data.errors?.[0]?.message || 'Failed to create IP access rule');\n    }\n\n    return response.data.result;\n  }\n\n  /**\n   * Update IP access rule\n   */\n  async updateIPAccessRule(ruleId: string, rule: Partial<FirewallRule>, zoneId?: string): Promise<any> {\n    const endpoint = zoneId\n      ? `/zones/${zoneId}/firewall/access_rules/rules/${ruleId}`\n      : `/accounts/${this.config.accountId}/firewall/access_rules/rules/${ruleId}`;\n\n    const response = await this.client.patch(endpoint, {\n      mode: rule.mode,\n      notes: rule.notes,\n    });\n\n    if (!response.data.success) {\n      throw new Error(response.data.errors?.[0]?.message || 'Failed to update IP access rule');\n    }\n\n    return response.data.result;\n  }\n\n  /**\n   * Delete IP access rule\n   */\n  async deleteIPAccessRule(ruleId: string, zoneId?: string): Promise<void> {\n    const endpoint = zoneId\n      ? `/zones/${zoneId}/firewall/access_rules/rules/${ruleId}`\n      : `/accounts/${this.config.accountId}/firewall/access_rules/rules/${ruleId}`;\n\n    const response = await this.client.delete(endpoint);\n\n    if (!response.data.success) {\n      throw new Error(response.data.errors?.[0]?.message || 'Failed to delete IP access rule');\n    }\n  }\n\n  /**\n   * Block IP address\n   */\n  async blockIP(ip: string, notes?: string, zoneId?: string): Promise<any> {\n    return this.createIPAccessRule(\n      {\n        mode: 'block',\n        configuration: {\n          target: 'ip',\n          value: ip,\n        },\n        notes: notes || `Blocked by Nginx Love WAF - ${new Date().toISOString()}`,\n      },\n      zoneId\n    );\n  }\n\n  /**\n   * Whitelist IP address\n   */\n  async whitelistIP(ip: string, notes?: string, zoneId?: string): Promise<any> {\n    return this.createIPAccessRule(\n      {\n        mode: 'whitelist',\n        configuration: {\n          target: 'ip',\n          value: ip,\n        },\n        notes: notes || `Whitelisted by Nginx Love WAF - ${new Date().toISOString()}`,\n      },\n      zoneId\n    );\n  }\n\n  /**\n   * Test connection\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      await this.client.get('/user/tokens/verify');\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
