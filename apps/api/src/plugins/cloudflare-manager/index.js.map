{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["/**\n * Cloudflare Manager Plugin\n * Manage Cloudflare DNS records and Firewall IP rules\n */\n\nimport { BasePlugin, PluginContext, PluginMetadata, PluginType } from '../../shared/plugin-sdk';\nimport { Router, Request, Response } from 'express';\nimport { CloudflareClient, CloudflareConfig } from './services/cloudflare-client';\n\ninterface CloudflareManagerConfig extends CloudflareConfig {\n  syncInterval?: number;\n  enableAutoSync?: boolean;\n  logLevel?: 'debug' | 'info' | 'warn' | 'error';\n}\n\nexport default class CloudflareManagerPlugin extends BasePlugin {\n  public metadata: PluginMetadata = {\n    id: 'cloudflare-manager',\n    name: 'Cloudflare Manager',\n    version: '1.0.0',\n    description: 'Manage Cloudflare DNS records and Firewall IP rules',\n    author: {\n      name: 'Nginx Love Team',\n      email: 'dev@nginxlove.com',\n    },\n    type: PluginType.INTEGRATION,\n    license: 'MIT',\n  };\n\n  private cfClient: CloudflareClient | null = null;\n  private syncTimer: NodeJS.Timeout | null = null;\n\n  /**\n   * Initialize plugin\n   */\n  async initialize(context: PluginContext): Promise<void> {\n    this.context = context;\n\n    const config = this.getConfig<CloudflareManagerConfig>();\n\n    // Validate config\n    if (!config.apiToken || !config.accountId) {\n      throw new Error('Cloudflare API token and Account ID are required');\n    }\n\n    // Initialize Cloudflare client\n    this.cfClient = new CloudflareClient({\n      apiToken: config.apiToken,\n      accountId: config.accountId,\n      zoneId: config.zoneId,\n    });\n\n    // Test connection\n    const isConnected = await this.cfClient.testConnection();\n    if (!isConnected) {\n      throw new Error('Failed to connect to Cloudflare API. Please check your credentials.');\n    }\n\n    this.log('info', 'Connected to Cloudflare API successfully');\n\n    // Register routes\n    await this.registerRoutes();\n\n    // Setup auto-sync if enabled\n    if (config.enableAutoSync) {\n      await this.setupAutoSync();\n    }\n\n    // Store initialization timestamp\n    await context.storage.set('initialized_at', new Date().toISOString());\n    await context.storage.set('last_sync', null);\n\n    this.log('info', 'Cloudflare Manager Plugin initialized successfully');\n  }\n\n  /**\n   * Register API routes\n   */\n  private async registerRoutes(): Promise<void> {\n    const router = Router();\n\n    // ==================== Zones ====================\n    \n    // GET /api/plugins/cloudflare-manager/zones\n    router.get('/zones', this.handleGetZones.bind(this));\n\n    // GET /api/plugins/cloudflare-manager/zones/:zoneId\n    router.get('/zones/:zoneId', this.handleGetZone.bind(this));\n\n    // ==================== DNS Records ====================\n\n    // GET /api/plugins/cloudflare-manager/zones/:zoneId/dns\n    router.get('/zones/:zoneId/dns', this.handleListDNS.bind(this));\n\n    // GET /api/plugins/cloudflare-manager/zones/:zoneId/dns/:recordId\n    router.get('/zones/:zoneId/dns/:recordId', this.handleGetDNS.bind(this));\n\n    // POST /api/plugins/cloudflare-manager/zones/:zoneId/dns\n    router.post('/zones/:zoneId/dns', this.handleCreateDNS.bind(this));\n\n    // PUT /api/plugins/cloudflare-manager/zones/:zoneId/dns/:recordId\n    router.put('/zones/:zoneId/dns/:recordId', this.handleUpdateDNS.bind(this));\n\n    // DELETE /api/plugins/cloudflare-manager/zones/:zoneId/dns/:recordId\n    router.delete('/zones/:zoneId/dns/:recordId', this.handleDeleteDNS.bind(this));\n\n    // ==================== Firewall Rules ====================\n\n    // GET /api/plugins/cloudflare-manager/firewall/rules\n    router.get('/firewall/rules', this.handleListFirewallRules.bind(this));\n\n    // GET /api/plugins/cloudflare-manager/firewall/rules/:ruleId\n    router.get('/firewall/rules/:ruleId', this.handleGetFirewallRule.bind(this));\n\n    // POST /api/plugins/cloudflare-manager/firewall/rules\n    router.post('/firewall/rules', this.handleCreateFirewallRule.bind(this));\n\n    // PUT /api/plugins/cloudflare-manager/firewall/rules/:ruleId\n    router.put('/firewall/rules/:ruleId', this.handleUpdateFirewallRule.bind(this));\n\n    // DELETE /api/plugins/cloudflare-manager/firewall/rules/:ruleId\n    router.delete('/firewall/rules/:ruleId', this.handleDeleteFirewallRule.bind(this));\n\n    // POST /api/plugins/cloudflare-manager/firewall/block-ip\n    router.post('/firewall/block-ip', this.handleBlockIP.bind(this));\n\n    // POST /api/plugins/cloudflare-manager/firewall/whitelist-ip\n    router.post('/firewall/whitelist-ip', this.handleWhitelistIP.bind(this));\n\n    // ==================== Sync ====================\n\n    // POST /api/plugins/cloudflare-manager/sync\n    router.post('/sync', this.handleSync.bind(this));\n\n    // GET /api/plugins/cloudflare-manager/stats\n    router.get('/stats', this.handleGetStats.bind(this));\n\n    this.context?.api.registerRoute('', router);\n    this.log('info', 'Routes registered successfully');\n  }\n\n  // ==================== Route Handlers - Zones ====================\n\n  private async handleGetZones(req: Request, res: Response): Promise<void> {\n    try {\n      const zones = await this.cfClient!.getZones();\n      res.json({ success: true, data: zones });\n    } catch (error: any) {\n      this.log('error', `Failed to get zones: ${error.message}`);\n      res.status(500).json({ success: false, error: error.message });\n    }\n  }\n\n  private async handleGetZone(req: Request, res: Response): Promise<void> {\n    try {\n      const { zoneId } = req.params;\n      const zone = await this.cfClient!.getZone(zoneId);\n      res.json({ success: true, data: zone });\n    } catch (error: any) {\n      this.log('error', `Failed to get zone: ${error.message}`);\n      res.status(500).json({ success: false, error: error.message });\n    }\n  }\n\n  // ==================== Route Handlers - DNS ====================\n\n  private async handleListDNS(req: Request, res: Response): Promise<void> {\n    try {\n      const { zoneId } = req.params;\n      const { type, name } = req.query;\n      const records = await this.cfClient!.listDNSRecords(zoneId, {\n        type: type as string,\n        name: name as string,\n      });\n      res.json({ success: true, data: records });\n    } catch (error: any) {\n      this.log('error', `Failed to list DNS records: ${error.message}`);\n      res.status(500).json({ success: false, error: error.message });\n    }\n  }\n\n  private async handleGetDNS(req: Request, res: Response): Promise<void> {\n    try {\n      const { zoneId, recordId } = req.params;\n      const record = await this.cfClient!.getDNSRecord(zoneId, recordId);\n      res.json({ success: true, data: record });\n    } catch (error: any) {\n      this.log('error', `Failed to get DNS record: ${error.message}`);\n      res.status(500).json({ success: false, error: error.message });\n    }\n  }\n\n  private async handleCreateDNS(req: Request, res: Response): Promise<void> {\n    try {\n      const { zoneId } = req.params;\n      const record = await this.cfClient!.createDNSRecord(zoneId, req.body);\n      \n      // Increment counter\n      const count = (await this.context?.storage.get('dns_records_created')) || 0;\n      await this.context?.storage.set('dns_records_created', count + 1);\n\n      this.log('info', `DNS record created: ${record.name}`);\n      res.json({ success: true, data: record });\n    } catch (error: any) {\n      this.log('error', `Failed to create DNS record: ${error.message}`);\n      res.status(400).json({ success: false, error: error.message });\n    }\n  }\n\n  private async handleUpdateDNS(req: Request, res: Response): Promise<void> {\n    try {\n      const { zoneId, recordId } = req.params;\n      const record = await this.cfClient!.updateDNSRecord(zoneId, recordId, req.body);\n      this.log('info', `DNS record updated: ${recordId}`);\n      res.json({ success: true, data: record });\n    } catch (error: any) {\n      this.log('error', `Failed to update DNS record: ${error.message}`);\n      res.status(400).json({ success: false, error: error.message });\n    }\n  }\n\n  private async handleDeleteDNS(req: Request, res: Response): Promise<void> {\n    try {\n      const { zoneId, recordId } = req.params;\n      await this.cfClient!.deleteDNSRecord(zoneId, recordId);\n      this.log('info', `DNS record deleted: ${recordId}`);\n      res.json({ success: true, message: 'DNS record deleted successfully' });\n    } catch (error: any) {\n      this.log('error', `Failed to delete DNS record: ${error.message}`);\n      res.status(400).json({ success: false, error: error.message });\n    }\n  }\n\n  // ==================== Route Handlers - Firewall ====================\n\n  private async handleListFirewallRules(req: Request, res: Response): Promise<void> {\n    try {\n      const { zoneId } = req.query;\n      const rules = await this.cfClient!.listIPAccessRules(zoneId as string);\n      res.json({ success: true, data: rules });\n    } catch (error: any) {\n      this.log('error', `Failed to list firewall rules: ${error.message}`);\n      res.status(500).json({ success: false, error: error.message });\n    }\n  }\n\n  private async handleGetFirewallRule(req: Request, res: Response): Promise<void> {\n    try {\n      const { ruleId } = req.params;\n      const { zoneId } = req.query;\n      const rule = await this.cfClient!.getIPAccessRule(ruleId, zoneId as string);\n      res.json({ success: true, data: rule });\n    } catch (error: any) {\n      this.log('error', `Failed to get firewall rule: ${error.message}`);\n      res.status(500).json({ success: false, error: error.message });\n    }\n  }\n\n  private async handleCreateFirewallRule(req: Request, res: Response): Promise<void> {\n    try {\n      const { zoneId } = req.query;\n      const rule = await this.cfClient!.createIPAccessRule(req.body, zoneId as string);\n      \n      // Increment counter\n      const count = (await this.context?.storage.get('firewall_rules_created')) || 0;\n      await this.context?.storage.set('firewall_rules_created', count + 1);\n\n      this.log('info', `Firewall rule created: ${rule.configuration?.value}`);\n      res.json({ success: true, data: rule });\n    } catch (error: any) {\n      this.log('error', `Failed to create firewall rule: ${error.message}`);\n      res.status(400).json({ success: false, error: error.message });\n    }\n  }\n\n  private async handleUpdateFirewallRule(req: Request, res: Response): Promise<void> {\n    try {\n      const { ruleId } = req.params;\n      const { zoneId } = req.query;\n      const rule = await this.cfClient!.updateIPAccessRule(ruleId, req.body, zoneId as string);\n      this.log('info', `Firewall rule updated: ${ruleId}`);\n      res.json({ success: true, data: rule });\n    } catch (error: any) {\n      this.log('error', `Failed to update firewall rule: ${error.message}`);\n      res.status(400).json({ success: false, error: error.message });\n    }\n  }\n\n  private async handleDeleteFirewallRule(req: Request, res: Response): Promise<void> {\n    try {\n      const { ruleId } = req.params;\n      const { zoneId } = req.query;\n      await this.cfClient!.deleteIPAccessRule(ruleId, zoneId as string);\n      this.log('info', `Firewall rule deleted: ${ruleId}`);\n      res.json({ success: true, message: 'Firewall rule deleted successfully' });\n    } catch (error: any) {\n      this.log('error', `Failed to delete firewall rule: ${error.message}`);\n      res.status(400).json({ success: false, error: error.message });\n    }\n  }\n\n  private async handleBlockIP(req: Request, res: Response): Promise<void> {\n    try {\n      const { ip, notes, zoneId } = req.body;\n      const rule = await this.cfClient!.blockIP(ip, notes, zoneId);\n      \n      const count = (await this.context?.storage.get('ips_blocked')) || 0;\n      await this.context?.storage.set('ips_blocked', count + 1);\n\n      this.log('info', `IP blocked: ${ip}`);\n      res.json({ success: true, data: rule, message: `IP ${ip} blocked successfully` });\n    } catch (error: any) {\n      this.log('error', `Failed to block IP: ${error.message}`);\n      res.status(400).json({ success: false, error: error.message });\n    }\n  }\n\n  private async handleWhitelistIP(req: Request, res: Response): Promise<void> {\n    try {\n      const { ip, notes, zoneId } = req.body;\n      const rule = await this.cfClient!.whitelistIP(ip, notes, zoneId);\n      \n      const count = (await this.context?.storage.get('ips_whitelisted')) || 0;\n      await this.context?.storage.set('ips_whitelisted', count + 1);\n\n      this.log('info', `IP whitelisted: ${ip}`);\n      res.json({ success: true, data: rule, message: `IP ${ip} whitelisted successfully` });\n    } catch (error: any) {\n      this.log('error', `Failed to whitelist IP: ${error.message}`);\n      res.status(400).json({ success: false, error: error.message });\n    }\n  }\n\n  // ==================== Sync & Stats ====================\n\n  private async handleSync(req: Request, res: Response): Promise<void> {\n    try {\n      await this.syncData();\n      res.json({ success: true, message: 'Sync completed successfully' });\n    } catch (error: any) {\n      this.log('error', `Sync failed: ${error.message}`);\n      res.status(500).json({ success: false, error: error.message });\n    }\n  }\n\n  private async handleGetStats(req: Request, res: Response): Promise<void> {\n    try {\n      const stats = {\n        plugin: this.metadata.name,\n        version: this.metadata.version,\n        initializedAt: await this.context?.storage.get('initialized_at'),\n        lastSync: await this.context?.storage.get('last_sync'),\n        dnsRecordsCreated: (await this.context?.storage.get('dns_records_created')) || 0,\n        firewallRulesCreated: (await this.context?.storage.get('firewall_rules_created')) || 0,\n        ipsBlocked: (await this.context?.storage.get('ips_blocked')) || 0,\n        ipsWhitelisted: (await this.context?.storage.get('ips_whitelisted')) || 0,\n      };\n      res.json({ success: true, data: stats });\n    } catch (error: any) {\n      res.status(500).json({ success: false, error: error.message });\n    }\n  }\n\n  // ==================== Auto Sync ====================\n\n  private async setupAutoSync(): Promise<void> {\n    const config = this.getConfig<CloudflareManagerConfig>();\n    const interval = (config.syncInterval || 30) * 60 * 1000; // Convert to ms\n\n    this.syncTimer = setInterval(async () => {\n      try {\n        await this.syncData();\n      } catch (error: any) {\n        this.log('error', `Auto-sync failed: ${error.message}`);\n      }\n    }, interval);\n\n    this.log('info', `Auto-sync enabled (interval: ${config.syncInterval} minutes)`);\n  }\n\n  private async syncData(): Promise<void> {\n    this.log('info', 'Starting sync...');\n    \n    // Here you can implement logic to sync data to local storage/database\n    // For now, just update last sync timestamp\n    \n    await this.context?.storage.set('last_sync', new Date().toISOString());\n    this.log('info', 'Sync completed');\n  }\n\n  // ==================== Lifecycle ====================\n\n  async destroy(): Promise<void> {\n    this.log('info', 'Destroying Cloudflare Manager Plugin...');\n\n    // Clear sync timer\n    if (this.syncTimer) {\n      clearInterval(this.syncTimer);\n      this.syncTimer = null;\n    }\n\n    // Clear client\n    this.cfClient = null;\n\n    await super.destroy();\n  }\n\n  async healthCheck(): Promise<{ healthy: boolean; message?: string }> {\n    try {\n      if (!this.cfClient) {\n        return { healthy: false, message: 'Cloudflare client not initialized' };\n      }\n\n      const isConnected = await this.cfClient.testConnection();\n      \n      if (!isConnected) {\n        return { healthy: false, message: 'Cannot connect to Cloudflare API' };\n      }\n\n      return { healthy: true, message: 'Connected to Cloudflare API' };\n    } catch (error: any) {\n      return { healthy: false, message: error.message };\n    }\n  }\n\n  async onInstall(context: PluginContext): Promise<void> {\n    this.log('info', 'Plugin installed');\n    await context.storage.set('install_date', new Date().toISOString());\n    await context.storage.set('dns_records_created', 0);\n    await context.storage.set('firewall_rules_created', 0);\n    await context.storage.set('ips_blocked', 0);\n    await context.storage.set('ips_whitelisted', 0);\n  }\n\n  async onUninstall(context: PluginContext): Promise<void> {\n    this.log('info', 'Plugin uninstalling, cleaning up...');\n    await context.storage.clear();\n  }\n\n  async onConfigChange(\n    context: PluginContext,\n    oldConfig: any,\n    newConfig: any\n  ): Promise<void> {\n    this.log('info', 'Configuration changed, reinitializing...');\n\n    // Reinitialize client with new config\n    if (newConfig.apiToken && newConfig.accountId) {\n      this.cfClient = new CloudflareClient({\n        apiToken: newConfig.apiToken,\n        accountId: newConfig.accountId,\n        zoneId: newConfig.zoneId,\n      });\n\n      // Test new connection\n      const isConnected = await this.cfClient.testConnection();\n      if (!isConnected) {\n        this.log('error', 'Failed to connect with new credentials');\n        throw new Error('Invalid Cloudflare credentials');\n      }\n    }\n\n    // Restart auto-sync if settings changed\n    if (oldConfig.syncInterval !== newConfig.syncInterval || oldConfig.enableAutoSync !== newConfig.enableAutoSync) {\n      if (this.syncTimer) {\n        clearInterval(this.syncTimer);\n        this.syncTimer = null;\n      }\n      \n      if (newConfig.enableAutoSync) {\n        await this.setupAutoSync();\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
