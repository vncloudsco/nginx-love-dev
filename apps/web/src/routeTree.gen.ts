/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as CatchallRouteImport } from './routes/$catchall'
import { Route as PluginsIndexRouteImport } from './routes/plugins.index'
import { Route as AuthIndexRouteImport } from './routes/_auth/index'
import { Route as PluginsPluginIdRouteImport } from './routes/plugins.$pluginId'
import { Route as AuthUsersRouteImport } from './routes/_auth/users'
import { Route as AuthSslRouteImport } from './routes/_auth/ssl'
import { Route as AuthPerformanceRouteImport } from './routes/_auth/performance'
import { Route as AuthNodesRouteImport } from './routes/_auth/nodes'
import { Route as AuthNetworkRouteImport } from './routes/_auth/network'
import { Route as AuthModsecurityRouteImport } from './routes/_auth/modsecurity'
import { Route as AuthLogsRouteImport } from './routes/_auth/logs'
import { Route as AuthDomainsRouteImport } from './routes/_auth/domains'
import { Route as AuthDashboardRouteImport } from './routes/_auth/dashboard'
import { Route as AuthBackupRouteImport } from './routes/_auth/backup'
import { Route as AuthAlertsRouteImport } from './routes/_auth/alerts'
import { Route as AuthAclRouteImport } from './routes/_auth/acl'
import { Route as AuthAccountRouteImport } from './routes/_auth/account'
import { Route as AuthAccessListsRouteImport } from './routes/_auth/access-lists'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const CatchallRoute = CatchallRouteImport.update({
  id: '/$catchall',
  path: '/$catchall',
  getParentRoute: () => rootRouteImport,
} as any)
const PluginsIndexRoute = PluginsIndexRouteImport.update({
  id: '/plugins/',
  path: '/plugins/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)
const PluginsPluginIdRoute = PluginsPluginIdRouteImport.update({
  id: '/plugins/$pluginId',
  path: '/plugins/$pluginId',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthUsersRoute = AuthUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSslRoute = AuthSslRouteImport.update({
  id: '/ssl',
  path: '/ssl',
  getParentRoute: () => AuthRoute,
} as any)
const AuthPerformanceRoute = AuthPerformanceRouteImport.update({
  id: '/performance',
  path: '/performance',
  getParentRoute: () => AuthRoute,
} as any)
const AuthNodesRoute = AuthNodesRouteImport.update({
  id: '/nodes',
  path: '/nodes',
  getParentRoute: () => AuthRoute,
} as any)
const AuthNetworkRoute = AuthNetworkRouteImport.update({
  id: '/network',
  path: '/network',
  getParentRoute: () => AuthRoute,
} as any)
const AuthModsecurityRoute = AuthModsecurityRouteImport.update({
  id: '/modsecurity',
  path: '/modsecurity',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLogsRoute = AuthLogsRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => AuthRoute,
} as any)
const AuthDomainsRoute = AuthDomainsRouteImport.update({
  id: '/domains',
  path: '/domains',
  getParentRoute: () => AuthRoute,
} as any)
const AuthDashboardRoute = AuthDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)
const AuthBackupRoute = AuthBackupRouteImport.update({
  id: '/backup',
  path: '/backup',
  getParentRoute: () => AuthRoute,
} as any)
const AuthAlertsRoute = AuthAlertsRouteImport.update({
  id: '/alerts',
  path: '/alerts',
  getParentRoute: () => AuthRoute,
} as any)
const AuthAclRoute = AuthAclRouteImport.update({
  id: '/acl',
  path: '/acl',
  getParentRoute: () => AuthRoute,
} as any)
const AuthAccountRoute = AuthAccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => AuthRoute,
} as any)
const AuthAccessListsRoute = AuthAccessListsRouteImport.update({
  id: '/access-lists',
  path: '/access-lists',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/$catchall': typeof CatchallRoute
  '/login': typeof LoginRoute
  '/access-lists': typeof AuthAccessListsRoute
  '/account': typeof AuthAccountRoute
  '/acl': typeof AuthAclRoute
  '/alerts': typeof AuthAlertsRoute
  '/backup': typeof AuthBackupRoute
  '/dashboard': typeof AuthDashboardRoute
  '/domains': typeof AuthDomainsRoute
  '/logs': typeof AuthLogsRoute
  '/modsecurity': typeof AuthModsecurityRoute
  '/network': typeof AuthNetworkRoute
  '/nodes': typeof AuthNodesRoute
  '/performance': typeof AuthPerformanceRoute
  '/ssl': typeof AuthSslRoute
  '/users': typeof AuthUsersRoute
  '/plugins/$pluginId': typeof PluginsPluginIdRoute
  '/': typeof AuthIndexRoute
  '/plugins': typeof PluginsIndexRoute
}
export interface FileRoutesByTo {
  '/$catchall': typeof CatchallRoute
  '/login': typeof LoginRoute
  '/access-lists': typeof AuthAccessListsRoute
  '/account': typeof AuthAccountRoute
  '/acl': typeof AuthAclRoute
  '/alerts': typeof AuthAlertsRoute
  '/backup': typeof AuthBackupRoute
  '/dashboard': typeof AuthDashboardRoute
  '/domains': typeof AuthDomainsRoute
  '/logs': typeof AuthLogsRoute
  '/modsecurity': typeof AuthModsecurityRoute
  '/network': typeof AuthNetworkRoute
  '/nodes': typeof AuthNodesRoute
  '/performance': typeof AuthPerformanceRoute
  '/ssl': typeof AuthSslRoute
  '/users': typeof AuthUsersRoute
  '/plugins/$pluginId': typeof PluginsPluginIdRoute
  '/': typeof AuthIndexRoute
  '/plugins': typeof PluginsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/$catchall': typeof CatchallRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/_auth/access-lists': typeof AuthAccessListsRoute
  '/_auth/account': typeof AuthAccountRoute
  '/_auth/acl': typeof AuthAclRoute
  '/_auth/alerts': typeof AuthAlertsRoute
  '/_auth/backup': typeof AuthBackupRoute
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/_auth/domains': typeof AuthDomainsRoute
  '/_auth/logs': typeof AuthLogsRoute
  '/_auth/modsecurity': typeof AuthModsecurityRoute
  '/_auth/network': typeof AuthNetworkRoute
  '/_auth/nodes': typeof AuthNodesRoute
  '/_auth/performance': typeof AuthPerformanceRoute
  '/_auth/ssl': typeof AuthSslRoute
  '/_auth/users': typeof AuthUsersRoute
  '/plugins/$pluginId': typeof PluginsPluginIdRoute
  '/_auth/': typeof AuthIndexRoute
  '/plugins/': typeof PluginsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/$catchall'
    | '/login'
    | '/access-lists'
    | '/account'
    | '/acl'
    | '/alerts'
    | '/backup'
    | '/dashboard'
    | '/domains'
    | '/logs'
    | '/modsecurity'
    | '/network'
    | '/nodes'
    | '/performance'
    | '/ssl'
    | '/users'
    | '/plugins/$pluginId'
    | '/'
    | '/plugins'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/$catchall'
    | '/login'
    | '/access-lists'
    | '/account'
    | '/acl'
    | '/alerts'
    | '/backup'
    | '/dashboard'
    | '/domains'
    | '/logs'
    | '/modsecurity'
    | '/network'
    | '/nodes'
    | '/performance'
    | '/ssl'
    | '/users'
    | '/plugins/$pluginId'
    | '/'
    | '/plugins'
  id:
    | '__root__'
    | '/$catchall'
    | '/_auth'
    | '/login'
    | '/_auth/access-lists'
    | '/_auth/account'
    | '/_auth/acl'
    | '/_auth/alerts'
    | '/_auth/backup'
    | '/_auth/dashboard'
    | '/_auth/domains'
    | '/_auth/logs'
    | '/_auth/modsecurity'
    | '/_auth/network'
    | '/_auth/nodes'
    | '/_auth/performance'
    | '/_auth/ssl'
    | '/_auth/users'
    | '/plugins/$pluginId'
    | '/_auth/'
    | '/plugins/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  CatchallRoute: typeof CatchallRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
  PluginsPluginIdRoute: typeof PluginsPluginIdRoute
  PluginsIndexRoute: typeof PluginsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$catchall': {
      id: '/$catchall'
      path: '/$catchall'
      fullPath: '/$catchall'
      preLoaderRoute: typeof CatchallRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/plugins/': {
      id: '/plugins/'
      path: '/plugins'
      fullPath: '/plugins'
      preLoaderRoute: typeof PluginsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/plugins/$pluginId': {
      id: '/plugins/$pluginId'
      path: '/plugins/$pluginId'
      fullPath: '/plugins/$pluginId'
      preLoaderRoute: typeof PluginsPluginIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/users': {
      id: '/_auth/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthUsersRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/ssl': {
      id: '/_auth/ssl'
      path: '/ssl'
      fullPath: '/ssl'
      preLoaderRoute: typeof AuthSslRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/performance': {
      id: '/_auth/performance'
      path: '/performance'
      fullPath: '/performance'
      preLoaderRoute: typeof AuthPerformanceRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/nodes': {
      id: '/_auth/nodes'
      path: '/nodes'
      fullPath: '/nodes'
      preLoaderRoute: typeof AuthNodesRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/network': {
      id: '/_auth/network'
      path: '/network'
      fullPath: '/network'
      preLoaderRoute: typeof AuthNetworkRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/modsecurity': {
      id: '/_auth/modsecurity'
      path: '/modsecurity'
      fullPath: '/modsecurity'
      preLoaderRoute: typeof AuthModsecurityRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/logs': {
      id: '/_auth/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof AuthLogsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/domains': {
      id: '/_auth/domains'
      path: '/domains'
      fullPath: '/domains'
      preLoaderRoute: typeof AuthDomainsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/backup': {
      id: '/_auth/backup'
      path: '/backup'
      fullPath: '/backup'
      preLoaderRoute: typeof AuthBackupRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/alerts': {
      id: '/_auth/alerts'
      path: '/alerts'
      fullPath: '/alerts'
      preLoaderRoute: typeof AuthAlertsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/acl': {
      id: '/_auth/acl'
      path: '/acl'
      fullPath: '/acl'
      preLoaderRoute: typeof AuthAclRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/account': {
      id: '/_auth/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AuthAccountRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/access-lists': {
      id: '/_auth/access-lists'
      path: '/access-lists'
      fullPath: '/access-lists'
      preLoaderRoute: typeof AuthAccessListsRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthAccessListsRoute: typeof AuthAccessListsRoute
  AuthAccountRoute: typeof AuthAccountRoute
  AuthAclRoute: typeof AuthAclRoute
  AuthAlertsRoute: typeof AuthAlertsRoute
  AuthBackupRoute: typeof AuthBackupRoute
  AuthDashboardRoute: typeof AuthDashboardRoute
  AuthDomainsRoute: typeof AuthDomainsRoute
  AuthLogsRoute: typeof AuthLogsRoute
  AuthModsecurityRoute: typeof AuthModsecurityRoute
  AuthNetworkRoute: typeof AuthNetworkRoute
  AuthNodesRoute: typeof AuthNodesRoute
  AuthPerformanceRoute: typeof AuthPerformanceRoute
  AuthSslRoute: typeof AuthSslRoute
  AuthUsersRoute: typeof AuthUsersRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAccessListsRoute: AuthAccessListsRoute,
  AuthAccountRoute: AuthAccountRoute,
  AuthAclRoute: AuthAclRoute,
  AuthAlertsRoute: AuthAlertsRoute,
  AuthBackupRoute: AuthBackupRoute,
  AuthDashboardRoute: AuthDashboardRoute,
  AuthDomainsRoute: AuthDomainsRoute,
  AuthLogsRoute: AuthLogsRoute,
  AuthModsecurityRoute: AuthModsecurityRoute,
  AuthNetworkRoute: AuthNetworkRoute,
  AuthNodesRoute: AuthNodesRoute,
  AuthPerformanceRoute: AuthPerformanceRoute,
  AuthSslRoute: AuthSslRoute,
  AuthUsersRoute: AuthUsersRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  CatchallRoute: CatchallRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
  PluginsPluginIdRoute: PluginsPluginIdRoute,
  PluginsIndexRoute: PluginsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
