# Production stage
FROM node:20-alpine AS builder

# Install pnpm
RUN corepack enable && corepack prepare pnpm@8.15.0 --activate

WORKDIR /app

# Copy workspace files
COPY /docker/pnpm-workspace.yaml ./
COPY /docker/package.json pnpm-lock.yaml ./
COPY /docker/turbo.json ./

# Copy app package files
COPY /apps/api/package.json ./apps/api/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY /apps/api ./apps/api

# Generate Prisma client
RUN cd apps/api && pnpm prisma:generate

# Build the application
RUN pnpm --filter @nginx-love/api build

# Production stage
FROM vouu/nginx-modsecurity-base:ubuntu2404

RUN apt-get update && apt-get install -y curl ca-certificates gnupg && \
    curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    rm -rf /var/lib/apt/lists/

RUN npm install -g corepack && corepack enable && corepack prepare pnpm@8.15.0 --activate

# Install OpenSSL and wget for Prisma and health checks
RUN apt-get update && apt-get install -y openssl apache2-utils wget && rm -rf /var/lib/apt/lists/*

# Install pnpm
RUN corepack enable && corepack prepare pnpm@8.15.0 --activate

WORKDIR /app

# Copy workspace and package files
COPY --from=builder /app/pnpm-workspace.yaml ./
COPY --from=builder /app/package.json /app/pnpm-lock.yaml ./
COPY --from=builder /app/apps/api/package.json ./apps/api/

# Copy built files and prisma
COPY --from=builder /app/apps/api/dist ./apps/api/dist
COPY --from=builder /app/apps/api/prisma ./apps/api/prisma

# Install all dependencies (needed for Prisma CLI and native modules)
RUN pnpm install --frozen-lockfile --filter @nginx-love/api

# Generate Prisma client
RUN cd apps/api && pnpm prisma:generate

# Install acme.sh for SSL certificate management
RUN cd /tmp && \
    wget -O acme.sh.tar.gz https://github.com/acmesh-official/acme.sh/archive/master.tar.gz && \
    tar -xzf acme.sh.tar.gz && \
    cd acme.sh-master && \
    ./acme.sh --install --force --home /root/.acme.sh && \
    ln -s /root/.acme.sh/acme.sh /usr/local/bin/acme.sh && \
    rm -rf /tmp/acme.sh*

WORKDIR /app/apps/api


COPY /docker/start.sh /start.sh
RUN chmod +x /start.sh

# Expose port 3001
EXPOSE 80 443 3001 

# Health check (using root endpoint)
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3001/ || exit 1

CMD ["/start.sh"]